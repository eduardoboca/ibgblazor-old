@page "/Localidades/edit"
@inject IBGBlazor.Data.ApplicationDbContext DB
@using IBGBlazor.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Editar Localidade</h1>

<hr />
@if (Localidade is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Localidade" OnValidSubmit="UpdateLocalidade" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Localidade.Id" value="@Localidade.Id" />
                <div class="mb-3">
                    <label for="state" class="form-label">Estado:</label>
                    <InputText id="state" @bind-Value="Localidade.State" class="form-control" />
                    <ValidationMessage For="() => Localidade.State" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">Cidade:</label>
                    <InputText id="city" @bind-Value="Localidade.City" class="form-control" />
                    <ValidationMessage For="() => Localidade.City" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Salvar</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/localidades">Voltar</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    public Localidade? Localidade { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Localidade ??= await DB.IBGE.FirstOrDefaultAsync(m => m.Id == Id);

        if (Localidade is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateLocalidade()
    {
        DB.Attach(Localidade!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!LocalidadeExists(Localidade!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/localidades");
    }

    bool LocalidadeExists(string id)
    {
        return DB.IBGE.Any(e => e.Id == id);
    }
}
